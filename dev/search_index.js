var documenterSearchIndex = {"docs":
[{"location":"toc/","page":"Table of Contents","title":"Table of Contents","text":"","category":"page"},{"location":"Tardigrade/#Tardigrade","page":"Tardigrade","title":"Tardigrade","text":"","category":"section"},{"location":"Tardigrade/","page":"Tardigrade","title":"Tardigrade","text":"Modules = [Tardigrade,]","category":"page"},{"location":"Quadratures/#Quadratures","page":"Tardigrade.Quadratures","title":"Quadratures","text":"","category":"section"},{"location":"Quadratures/","page":"Tardigrade.Quadratures","title":"Tardigrade.Quadratures","text":"Modules = [Quadratures,]","category":"page"},{"location":"Quadratures/#Tardigrade.Quadratures","page":"Tardigrade.Quadratures","title":"Tardigrade.Quadratures","text":"Quadratures\n\nA module for organizing quadrature integration rules.\n\n\n\n\n\n","category":"module"},{"location":"Quadratures/#Tardigrade.Quadratures.Quadrature","page":"Tardigrade.Quadratures","title":"Tardigrade.Quadratures.Quadrature","text":"Quadrature\n\nContainer for managing quadrature points and weights.\n\nArguments\n\nÎ¾::Matrix{Float64}: Quadrature points w::Vector{Float64}: Quadrature weights\n\n\n\n\n\n","category":"type"},{"location":"Quadratures/#Tardigrade.Quadratures.quad4_quadrature_points_and_weights-Tuple{Int64}","page":"Tardigrade.Quadratures","title":"Tardigrade.Quadratures.quad4_quadrature_points_and_weights","text":"quad4_quadrature_points_and_weights(q_order::Int64)\n\nDefines quadrature rule for quad4 elements.\n\nArguments\n\nq_order::Int64: quadrature order\n\n\n\n\n\n","category":"method"},{"location":"Quadratures/#Tardigrade.Quadratures.quadrautre_order_error-Tuple{Int64}","page":"Tardigrade.Quadratures","title":"Tardigrade.Quadratures.quadrautre_order_error","text":"quadrature_order_error(q_order::Int64)\n\nPre-defined error for improrper quadrature order.\n\nArguments\n\nq_order::Int64: quadrature order\n\n\n\n\n\n","category":"method"},{"location":"#Tardigrade","page":"Home","title":"Tardigrade","text":"","category":"section"},{"location":"#Inspiration","page":"Home","title":"Inspiration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main inspiration for Tardigrade.jl came from the INL FEM code Moose. Moose is a fully-implicit FEM code meant for highly coupled physics problems. It has shown great success in various fields such as coupled phase-field/solid mechanics, nuclear reactor design, etc. After using Moose for sometime, this package's author found the solid mechanics modules slightly cumbersome, especially for generalizing constitutive models for materials with state. Also, developing in C++ is not nearly as fun as julia!","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"Tardigrade.md\",\n    \"Meshes.md\",\n    \"Quadratures.md\"\n]","category":"page"},{"location":"Meshes/#Meshes","page":"Tardigrade.Meshes","title":"Meshes","text":"","category":"section"},{"location":"Meshes/","page":"Tardigrade.Meshes","title":"Tardigrade.Meshes","text":"Modules = [Meshes,]","category":"page"}]
}
